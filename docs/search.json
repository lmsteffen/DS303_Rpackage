[{"path":"https://lmsteffen.github.io/lmstt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 lmstt authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lmsteffen.github.io/lmstt/articles/lms-index.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"lms-index","text":"data came Bureau Transportation Statistics. pollution incidents Coast Guard investigated lead agency included dataset. Data spills Environmental Protection Agency state authorities lead agency included. mostly offshore spills EPA usually handles inshore spills. statistics cover yearly gallons spilled, number incidents, source type 1985, 1990, 1995-2020.","code":""},{"path":[]},{"path":"https://lmsteffen.github.io/lmstt/articles/lms-index.html","id":"gallons-spilled","dir":"Articles","previous_headings":"Vessel, Non-Vessel, and Mystery Sources","what":"Gallons Spilled","title":"lms-index","text":"“April 20, 2010, oil drilling rig Deepwater Horizon, operating Macondo Prospect Gulf Mexico, exploded sank resulting death 11 workers Deepwater Horizon largest spill oil history marine oil drilling operations.”","code":"oilSpills |> dplyr::filter(Source == \"Vessel sources, total\" |                       Source == \"Nonvessel sources, total\"|                      Source == \"Mysteryc\") |>    plotly::plot_ly(x = ~Year, y =~`Gallons spilled`, color = ~Source, type=\"bar\", colors =              c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\"),            width = 1000) |>   plotly::layout(yaxis = list(fixedrange = FALSE),          updatemenus = list(             list(               type = \"buttons\",               x = 0.6,               y = 1,               direction = \"right\",               buttons = list(                                  list(method = \"relayout\",                 args = list(\"barmode\",\"dodge\"),                 label = \"Grouped\"),                  list(method = \"relayout\",                 args = list(\"barmode\",\"stack\"),                 label = \"Stacked\")))                     ))"},{"path":"https://lmsteffen.github.io/lmstt/articles/lms-index.html","id":"incidents","dir":"Articles","previous_headings":"Vessel, Non-Vessel, and Mystery Sources","what":"Incidents","title":"lms-index","text":"","code":"oilSpills |> dplyr::filter(Source == \"Vessel sources, total\"|                       Source == \"Nonvessel sources, total\"|                      Source == \"Mysteryc\")  |>   tidyr::drop_na() |>   plotly::plot_ly(width = 1000) |>   plotly::add_trace(x = ~Year, y = ~Incidents, type = 'scatter', color =~Source, mode = 'lines+markers',              colors = c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\"))"},{"path":"https://lmsteffen.github.io/lmstt/articles/lms-index.html","id":"source-incidents-and-gallons-spilled","dir":"Articles","previous_headings":"Vessel, Non-Vessel, and Mystery Sources","what":"Source, Incidents, and Gallons Spilled","title":"lms-index","text":"","code":"y2 <- list(   overlaying = \"y\",   side = \"right\",   title = \"Number of Incidents\",   automargin = T)  oilSpills |> dplyr::filter(Source != \"TOTAL all spills\",                       Source != \"Vessel sources, total\",                       Source != \"Nonvessel sources, total\")  |>   tidyr::drop_na() |>   dplyr::mutate(Source = forcats::fct_reorder(Source, dplyr::desc(`Gallons spilled`))) |>   plotly::plot_ly(x = ~Year, y =~`Gallons spilled`, color = ~Source, type=\"bar\", colors = \"Accent\",           width = 1000, height = 500) |>   dplyr::group_by(Year) |>   dplyr::summarise(n = sum(Incidents)) |>   plotly::add_trace(x = ~Year, y = ~n, type = 'scatter',  mode = 'markers',              name = \"Incidents\", yaxis = \"y2\", color = I(\"black\")) |>   plotly::layout(yaxis2 = y2,          yaxis = list(fixedrange = FALSE),           updatemenus = list(             list(               type = \"buttons\",               x = 0.6,               y = 1,               direction = \"right\",               buttons = list(                                  list(method = \"relayout\",                 args = list(\"barmode\",\"dodge\"),                 label = \"Grouped\"),                  list(method = \"relayout\",                 args = list(\"barmode\",\"stack\"),                 label = \"Stacked\")))   )) |>   plotly::rangeslider()"},{"path":"https://lmsteffen.github.io/lmstt/articles/lms-index.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"lms-index","text":"unpivotr behead function tidyxl range slider","code":""},{"path":"https://lmsteffen.github.io/lmstt/articles/tom-index.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"tom-index","text":"project, decided recreate Hans Rosling’s population GDP graph. graph can found . Since video share dataset, downloaded another dataset World Data.","code":""},{"path":"https://lmsteffen.github.io/lmstt/articles/tom-index.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data Visualization","title":"tom-index","text":"used plotly crosstalk make visualization. think crosstalk go well animation plots continents/countries shown different ones selected.","code":""},{"path":[]},{"path":[]},{"path":"https://lmsteffen.github.io/lmstt/articles/tom-index.html","id":"improvement","dir":"Articles","previous_headings":"","what":"Improvement","title":"tom-index","text":"improvement, like make similar graph Figure 13.10 Wilke’s Fundamentals Data Visualization. code taken modified Wilke’s github repo. graph shows life expectancy GDP per capita transition time Afghanistan. transparency line represents year. future, like incorporate graph crosstalk. seems like crosstalk go well geom_text_repel. also need figure show selected country graph (previous graphs, color = entity , graph nothing differentiate countries makes sense).","code":""},{"path":"https://lmsteffen.github.io/lmstt/articles/tom-index.html","id":"reflection","dir":"Articles","previous_headings":"","what":"Reflection","title":"tom-index","text":"wanted make simple possible. Without selector continents/countries, dots crammed together difficult see specific continents/countries. implementing selector, think visualization became much simpler. animation visualizations, selected countries match shown graph, want fix future. bar graph, adjacent countries list similar color, hard distinguish. frustrating part definitely mismatching selected shown.","code":""},{"path":"https://lmsteffen.github.io/lmstt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomoki Takeuchi. Author, maintainer.","code":""},{"path":"https://lmsteffen.github.io/lmstt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Takeuchi T (2022). lmstt: Apply Function Dataframe. R package version 0.0.0.9000.","code":"@Manual{,   title = {lmstt: Apply a Function to a Dataframe},   author = {Tomoki Takeuchi},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"https://lmsteffen.github.io/lmstt/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply functions to data frame — df_apply","title":"Apply functions to data frame — df_apply","text":"Apply functions data frame","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply functions to data frame — df_apply","text":"","code":"df_apply(.data, .f, .condition = is.numeric, .else = identity, ...)"},{"path":"https://lmsteffen.github.io/lmstt/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply functions to data frame — df_apply","text":".data data frame .f function .condition condition function .else function apply .condition() evaluates FALSE ... additional arguments passed .f()","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply functions to data frame — df_apply","text":"data frame","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply functions to data frame — df_apply","text":"","code":"df_apply(iris, round, is.numeric, identity, digit = 1) #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # … with 140 more rows"},{"path":"https://lmsteffen.github.io/lmstt/reference/le.html","id":null,"dir":"Reference","previous_headings":"","what":"Population, GDP, Year — le","title":"Population, GDP, Year — le","text":"dataset containing countries, country codes, life expectancy, GDP per capita, Population year 1950 2019","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/le.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population, GDP, Year — le","text":"","code":"le"},{"path":"https://lmsteffen.github.io/lmstt/reference/le.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Population, GDP, Year — le","text":"data frame 60067 rows 7 variables: Entity Country names Code Country code (AFG Afghanistan) Year data collected Life_expectancy Life expectancy GDP_per_capita GDP per capita 145446-annotations sure... ignored population_historical_estimates Population continent Continent country belongs ","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/le.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Population, GDP, Year — le","text":"https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/le.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population, GDP, Year — le","text":"","code":"mean_life_expectancy <- mean(le$life_expectancy)"},{"path":"https://lmsteffen.github.io/lmstt/reference/oilSpills.html","id":null,"dir":"Reference","previous_headings":"","what":"Petroleum Oil Spills Impacting Navigable US Waters — oilSpills","title":"Petroleum Oil Spills Impacting Navigable US Waters — oilSpills","text":"dataset containing yearly gallons spilled, number incidents, source type oil spills 1985, 1990, 1995-2020.","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/oilSpills.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Petroleum Oil Spills Impacting Navigable US Waters — oilSpills","text":"","code":"oilSpills"},{"path":"https://lmsteffen.github.io/lmstt/reference/oilSpills.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Petroleum Oil Spills Impacting Navigable US Waters — oilSpills","text":"data frame 280 rows 4 variables: Year: year spill Source: source spill Incidents: number incidents source year Gallons spilled: number gallons oil spilled source year","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/oilSpills.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Petroleum Oil Spills Impacting Navigable US Waters — oilSpills","text":"https://www.bts.gov/content/petroleum-oil-spills-impacting-navigable-us-waters","code":""},{"path":"https://lmsteffen.github.io/lmstt/reference/oilSpills.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Petroleum Oil Spills Impacting Navigable US Waters — oilSpills","text":"","code":"oilSpills |> dplyr::group_by(Year) |> dplyr::summarize(Gallons = sum(`Gallons spilled`)) #> # A tibble: 28 × 2 #>     Year  Gallons #>    <dbl>    <dbl> #>  1  1985 24985636 #>  2  1990 23625644 #>  3  1995  7858833 #>  4  1996  9324985 #>  5  1997  2767292 #>  6  1998  2638557 #>  7  1999  3472754 #>  8  2000  4270144 #>  9  2001  2549419 #> 10  2002  1726019 #> # … with 18 more rows"}]
